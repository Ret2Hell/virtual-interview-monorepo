{
    "problem": {
        "title": "Sakurako and Water",
        "description": "During her journey with Kosuke, Sakurako and Kosuke found a valley that can be represented as a matrix of size n × n , where at the intersection of the i -th row and the j -th column is a mountain with a height of a i , j . If a i , j < 0 , then there is a lake there. Kosuke is very afraid of water, so Sakurako needs to help him: With her magic, she can select a square area of mountains and increase the height of each mountain on the main diagonal of that area by exactly one. More formally, she can choose a submatrix with the upper left corner located at ( i , j ) and the lower right corner at ( p , q ) , such that p − i = q − j . She can then add one to each element at the intersection of the ( i + k ) -th row and the ( j + k ) -th column, for all k such that 0 ≤ k ≤ p − i . Determine the minimum number of times Sakurako must use her magic so that there are no lakes.",
        "input_specification": "The first line contains a single integer t (1≤t≤200) — the number of test cases.Each test case is described as follows: The first line of each test case consists of a single number n (1≤n≤500). Each of the following n lines consists of n integers separated by spaces, which correspond to the heights of the mountains in the valley a (−105≤ai,j≤105). It is guaranteed that the sum of n across all test cases does not exceed 1000.",
        "output_specification": "For each test case, output the minimum number of times Sakurako will have to use her magic so that all lakes disappear.",
        "time_limit": "2 seconds",
        "memory_limit": "256 megabytes",
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy"
        ],
        "examples": [
            {
                "input": "4\n1\n1\n2\n-1 2\n3 0\n3\n1 2 3\n-2 1 -1\n0 0 -1\n5\n1 1 -1 -1 3\n-3 1 4 4 -4\n-1 -1 3 0 -5\n4 5 3 -3 -1\n3 1 -3 -1 5",
                "output": "0\n1\n4\n19\n"
            }
        ],
        "difficulty": "easy"
    },
    "solution": {
        "description": "2033B - Sakurako and WaterIn this task we were supposed to find the minimal possible amount of moves that Sakurako needs to make in order to make all elements in the matrix non-negative. The key observation is to notice that Sakurako can only add simultaneously to elements that lay on one diagonal. For cell (i,j), let the \"index\" of diagonal which it is placed on is equal to d(i,j)=(i−j). This is proven by the fact that for (i,j) and (i+1,j+1) the equation d(i,j)=d(i+1,j+1) holds.We are able to add to a pair of elements (x,y) and (x1,y1) simultaneously if and only if d(x,y)=d(x1,y1).From this we can reduce our problem to finding the amount of times that we need to add 1 to this diagonal in order for all of its elements to become non-negative.For each diagonal we find the minimal element in it and there will be two cases: 1. The minimal element is non-negative: we don't need to add anything to that diagonal.2. The minimal element is negative and equal to x: we will need to add one at least −x times (remember that x is negative). After that, the answer for our task is the sum of answers for each individual diagonal.Total time complexity O(n2)",
        "code": "def solve():\n    n = int(input())\n    mn = dict()\n    for i in range(n):\n        a = [int(x) for x in input().split()]\n        for j in range(n):\n            mn[i - j] = min(a[j], mn.get(i - j, 0))\n    ans = 0\n    for value in mn.values():\n        ans -= value\n    print(ans)\n \nt = int(input())\nfor _ in range(t):\n    solve()"
    }
}