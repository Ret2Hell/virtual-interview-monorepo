{
    "problem": {
        "title": "Intercepted Inputs",
        "description": "To help you prepare for your upcoming Codeforces contest, Citlali set a grid problem and is trying to give you a n by m grid through your input stream. Specifically, your input stream should contain the following: The first line contains two integers n and m — the dimensions of the grid. The following n lines contain m integers each — the values of the grid. However, someone has intercepted your input stream, shuffled all given integers, and put them all on one line! Now, there are k integers all on one line, and you don't know where each integer originally belongs. Instead of asking Citlali to resend the input, you decide to determine the values of n and m yourself. Output any possible value of n and m that Citlali could have provided.",
        "input_specification": "The first line contains an integer tt (1≤t≤1041≤t≤104) — the number of test cases.The first line of each test case contains an integer kk (3≤k≤2⋅1053≤k≤2⋅105) — the total number of inputs in your input stream.The following line of each test case contains kk integers a1,a2,…,aka1,a2,…,ak (1≤ai≤k1≤ai≤k) — the shuffled inputs of your input stream. It is guaranteed that nn and mm are contained within the kk integers.It is guaranteed that the sum of kk over all test cases does not exceed 2⋅1052⋅105.",
        "output_specification": "For each test case, output two integers, one possible value of nn and mm. If multiple possible answers exist, output any.",
        "time_limit": "2 seconds",
        "memory_limit": "256 megabytes",
        "tags": [
            "brute force",
            "implementation"
        ],
        "examples": [
            {
                "input": "5\n3\n1 1 2\n11\n3 3 4 5 6 7 8 9 9 10 11\n8\n8 4 8 3 8 2 8 1\n6\n2 1 4 5 3 3\n8\n1 2 6 3 8 5 5 3",
                "output": "1 1\n3 3\n2 3\n4 1\n1 6"
            }
        ],
        "difficulty": "easy"
    },
    "solution": {
        "description": "You must check if you can find two integers nn and mm, such that n⋅m+2=kn⋅m+2=k. You can either use a counter, or use two pointers. Do note that n2+2=kn2+2=k is an edge case that must be separated if you use a counter to implement it. This edge case does not appear in the two pointers approach. Time complexity is O(nlogn)O(nlog⁡n) (assuming you are wise enough to not use a hash table).",
        "code": "testcases = int(input())\nfor _ in range(testcases):\n    k = int(input())\n    list = input().split()\n    freq = []\n    for i in range(k+1):\n        freq.append(0)\n    for x in list:\n        freq[int(x)] = freq[int(x)]+1\n    solution = (-1,-1)\n    for i in range(1,k+1):\n        if i*i==k-2:\n            if freq[i]>1:\n                solution = (i,i)\n        elif (k-2)%i==0:\n            if freq[i]>0 and freq[(k-2)//i]>0:\n                solution = (i, (k-2)//i)\n    print(solution[0], solution[1])"
    }
}