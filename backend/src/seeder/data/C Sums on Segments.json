{
    "problem": {
        "title": "Sums on Segments",
        "description": "You are given an array a a of n integers, where all elements except for at most one are equal to − 1 or 1 . The remaining element x satisfies − 10 9 ≤ x ≤ 10 9 . Find all possible sums of subarrays of a , including the empty subarray, whose sum is defined as 0 . In other words, find all integers x such that the array a has at least one subarray (possibly empty) with sum equal to x . A subarray is a contiguous subsegment of an array. Output these sums in ascending order. Each sum should be printed only once, even if it is achieved by multiple subarrays.",
        "input_specification": "The first line contains a single integer t (1≤t≤104) — the number of test cases. Then, t test cases follow.Each test case consists of two lines: The first line contains a single integer n (1≤n≤2⋅105) — the size of the array. The second line contains n integers a1,a2,…,an (−109≤ai≤109) — the elements of the array a. In the array a, there is at most one element that is neither 1 nor −1. Additional constraint on the input: the sum of n over all test cases does not exceed 2⋅105.",
        "output_specification": "For each test case, output two lines: In the first line, print a single integer — the number of distinct subarray sums. In the second line, print these sums in ascending order. Each sum should be printed only once, even if it is produced by multiple subarrays.",
        "time_limit": "1 second",
        "memory_limit": "256 megabytes",
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "greedy",
            "math"
        ],
        "examples": [
            {
                "input": "5\n5\n1 -1 10 1 1\n5\n-1 -1 -1 -1 -1\n2\n-1 2\n2\n7 1\n3\n1 4 -1",
                "output": "8\n-1 0 1 2 9 10 11 12 \n6\n-5 -4 -3 -2 -1 0 \n4\n-1 0 1 2 \n4\n0 1 7 8 \n6\n-1 0 1 3 4 5 \n"
            }
        ],
        "difficulty": "medium"
    },
    "solution": {
        "description": "2043C - Sums on SegmentsWhat could the answer to the problem be if all elements were equal to 1 or -1? Let's consider all segments with a fixed left boundary l. The empty segment [l; l-1] has a sum of 0. As we move the right boundary to the right, the sum will change by \\pm1. That is, we can obtain all sums from the minimum sum to the maximum one. To find the sums for the entire array, we need to find the union of the segments. Since all segments include 0, their union is also a segment. Therefore, the possible sums are all sums from the minimum sum to the maximum sum in the entire array.Now let's apply this reasoning to the given problem. The segments that do not include the strange element still form a segment of possible sums that includes 0. As for the segments that include the strange element, we can look at them this way. We will remember these segments and remove the strange element. Then the resulting sums will also form a segment that includes 0. If we return the element to its place, all sums will increase exactly by this element. Thus, it will remain a segment, however, not necessarily including 0 now.Then the solution could be as follows. We will find the minimum and maximum sum among the segments that do not contain the strange element. We will find the minimum and maximum sum among the segments that do contain it. Then we will output the union of the obtained sum segments.Next, you need to adapt your favorite algorithm for finding the maximum sum segment for this problem. My favorite is reducing it to prefix sums. The sum of the segment [l; r] is equal to \\mathit{pref}_{r+1} - \\mathit{pref}_l. We fix the right boundary of the segment r. Since the first term for all segments is now the same, the maximum sum segment with this right boundary is the one with the minimum possible prefix sum at the left boundary. We will then iterate over r in increasing order and find the maximum sum among all right boundaries. The minimum prefix sum on the left can be maintained on the fly.For a fixed right boundary, we have two options: for some prefix of left boundaries, the strange element is inside the segment, and for some suffix, it is outside. This suffix may be empty if the boundary r is to the left of the strange element. Therefore, we will maintain two values on the fly: the minimum prefix sum before the strange element and after it.Finally, we need to find the possible sums in the union of the two segments. There are two options here. If the segments intersect, then it includes all sums from the minimum of the left boundaries to the maximum of the right ones. If they do not intersect, then it is simply two segments.Overall complexity: O(n) per testcase.",
        "code": "for _ in range(int(input())):\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tl1, r1 = 0, 0\n\tl2, r2 = 2*10**9, -2*10**9\n\t\n\tpr = 0\n\tmnl, mxl = 0, 0\n\tmnr, mxr = 2*10**9, -2*10**9\n\tfor i in range(n):\n\t\tpr += a[i]\n\t\tif a[i] != -1 and a[i] != 1:\n\t\t\tmnr, mxr = mnl, mxl\n\t\t\tmnl, mxl = pr, pr\n\t\tl1 = min(l1, pr - mxl)\n\t\tr1 = max(r1, pr - mnl)\n\t\tl2 = min(l2, pr - mxr)\n\t\tr2 = max(r2, pr - mnr)\n\t\tmnl = min(mnl, pr)\n\t\tmxl = max(mxl, pr)\n\tres = []\n\tif l2 > r1:\n\t\tres = list(range(l1, r1 + 1)) + list(range(l2, r2 + 1))\n\telif r2 < l1:\n\t    res = list(range(l2, r2 + 1)) + list(range(l1, r1 + 1))\n\telse:\n\t\tres = list(range(min(l1, l2), max(r1, r2) + 1))\n\tprint(len(res))\n\tprint(*res)"
    }
}