{
    "problem": {
        "title": "String",
        "description": "You are given a string s of length n consisting of 0 and/or 1 . In one operation, you can select a non-empty subsequence t from s such that any two adjacent characters in t are different. Then, you flip each character of t ( 0 becomes 1 and 1 becomes 0 ). For example, if s = 0 _ 0 101 _ and t = s 1 s 3 s 4 s 5 = 0101 , after the operation, s becomes 1 _ 0 010 _ . Calculate the minimum number of operations required to change all characters in s to 0 . Recall that for a string s = s 1 s 2 … s n , any string t = s i 1 s i 2 … s i k ( k ≥ 1 ) where 1 ≤ i 1 < i 2 < … < i k ≤ n is a subsequence of s .",
        "input_specification": "The first line of input contains a single integer tt (1≤t≤1041≤t≤104) — the number of input test cases.The only line of each test case contains the string ss (1≤|s|≤501≤|s|≤50), where |s||s| represents the length of ss.",
        "output_specification": "For each test case, output the minimum number of operations required to change all characters in ss to 00.",
        "time_limit": "1 second",
        "memory_limit": "512 megabytes",
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "strings"
        ],
        "examples": [
            {
                "input": "5\n1\n000\n1001\n10101\n01100101011101",
                "output": "1\n0\n2\n3\n8\n"
            }
        ],
        "difficulty": "easy"
    },
    "solution": {
        "description": "2062A - StringLet cc be the number of 11s. On one hand, each operation can decrease cc by at most 11, so the answer is at least cc. On the other hand, by only operating on 11s each time, it takes exactly cc operations, so the answer is at most cc. Therefore, the answer is cc.",
        "code": "for _ in range(int(input())):\n    print(input().count('1'))"
    }
}