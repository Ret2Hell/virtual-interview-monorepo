{
    "problem": {
        "title": "Serval and The Formula",
        "description": "You are given two positive integers x and y ( 1 ≤ x , y ≤ 10 9 ). Find a non-negative integer k ≤ 10 18 , such that ( x + k ) + ( y + k ) = ( x + k ) ⊕ ( y + k ) holds ∗ , or determine that such an integer does not exist. ∗ ⊕ denotes the bitwise XOR operation .",
        "input_specification": "Each test contains multiple test cases. The first line contains the number of test cases tt (1≤t≤1041≤t≤104). The description of the test cases follows. The only line of each test case contains two integers xx and yy (1≤x,y≤1091≤x,y≤109) — the given integers.",
        "output_specification": "For each test case, output a single integer kk (0≤k≤10180≤k≤1018) — the integer you found. Print −1−1 if it is impossible to find such an integer.If there are multiple answers, you may print any of them.",
        "time_limit": "2 seconds",
        "memory_limit": "256 megabytes",
        "tags": [
            "bitmasks",
            "constructive algorithms",
            "dp",
            "greedy"
        ],
        "examples": [
            {
                "input": "5\n2 5\n6 6\n19 10\n1024 4096\n1198372 599188",
                "output": "0\n-1\n1\n1024\n28\n"
            }
        ],
        "difficulty": "medium"
    },
    "solution": {
        "description": "It can be shown that such an non-negative integer k does not exist when x=y.When x≠y, one can show that k=2n−max(x,y) is a possible answer, where 2n is a power of 2 that is sufficiently large.",
        "code": "getint = lambda: int(input())\ngetints = lambda: map(int, input().split())\n\ndef solve():\n\tx, y = getints()\n\tif x == y:\n\t\tprint(-1)\n\telse:\n\t\tprint(2 ** 48 - max(x, y))\n\nt = getint()\nfor _ in range(t):\n\tsolve()"
    }
}