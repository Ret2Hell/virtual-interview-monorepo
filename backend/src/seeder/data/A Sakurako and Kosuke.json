{
    "problem": {
        "title": "Sakurako and Kosuke",
        "description": "Sakurako and Kosuke decided to play some games with a dot on a coordinate line. The dot is currently located in position x = 0 . They will be taking turns, and Sakurako will be the one to start . On the i -th move, the current player will move the dot in some direction by 2 ⋅ i − 1 units. Sakurako will always be moving the dot in the negative direction, whereas Kosuke will always move it in the positive direction. In other words, the following will happen: Sakurako will change the position of the dot by − 1 , x = − 1 now Kosuke will change the position of the dot by 3 , x = 2 now Sakurako will change the position of the dot by − 5 , x = − 3 now ⋯ They will keep on playing while the absolute value of the coordinate of the dot does not exceed n . More formally, the game continues while − n ≤ x ≤ n . It can be proven that the game will always end. Your task is to determine who will be the one who makes the last turn.",
        "input_specification": "The first line contains one integer tt (1≤t≤1001≤t≤100) — the number of games that Sakurako and Kosuke played.Each game is described by one number nn (1≤n≤1001≤n≤100) — the number that defines the condition when the game ends.",
        "output_specification": "For each of the tt games, output a line with the result of that game. If Sakurako makes the last turn, output \"Sakurako\" (without quotes); else output \"Kosuke\".",
        "time_limit": "1 second",
        "memory_limit": "256 megabytes",
        "tags": [
            "constructive algorithms",
            "implementation",
            "math"
        ],
        "examples": [
            {
                "input": "4\n1\n6\n3\n98",
                "output": "Kosuke\nSakurako\nKosuke\nSakurako\n"
            }
        ],
        "difficulty": "easy"
    },
    "solution": {
        "description": "2033A - Sakurako and KosukeFor this task we could just brute-force the answer by repeatedly adding or substracting the odd numbers from the initial position 00. This would result in O(n)O(n) time complexity. This is sufficient enough.",
        "code": "def solve():\n    n = int(input())\n    x = 0\n    c = 1\n    while -n <= x <= n:\n        if c % 2 == 1:\n            x -= 2 * c - 1\n        else:\n            x += 2 * c - 1\n        c += 1\n    if c % 2 == 0:\n        print(\"Sakurako\")\n    else:\n        print(\"Kosuke\")\n\n\nfor tc in range(int(input())):\n    solve()"
    }
}