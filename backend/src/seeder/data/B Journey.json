{
    "problem": {
        "title": "Journey",
        "description": "Monocarp decided to embark on a long hiking journey. He decided that on the first day he would walk a kilometers, on the second day he would walk b kilometers, on the third day he would walk c kilometers, on the fourth day, just like on the first, he would walk a kilometers, on the fifth day, just like on the second, he would walk b kilometers, on the sixth day, just like on the third, he would walk c kilometers, and so on. Monocarp will complete his journey on the day when he has walked at least n kilometers in total. Your task is to determine the day on which Monocarp will complete his journey.",
        "input_specification": "The first line contains one integer tt (1≤t≤1041≤t≤104) — the number of test cases.Each test case consists of one line containing four integers nn, aa, bb, cc (1≤n≤1091≤n≤109; 1≤a,b,c≤1061≤a,b,c≤106).",
        "output_specification": "For each test case, output one integer — the day on which Monocarp will have walked at least nn kilometers in total and will complete his journey.",
        "time_limit": "1 second",
        "memory_limit": "256 megabytes",
        "tags": [
            "binary search",
            "math"
        ],
        "examples": [
            {
                "input": "4\n12 1 5 3\n6 6 7 4\n16 3 4 1\n1000000000 1 1 1",
                "output": "5\n1\n6\n1000000000\n"
            }
        ],
        "difficulty": "easy"
    },
    "solution": {
        "description": "2051B - JourneyProcessing every day separately is too slow. Instead, we will use the fact that every three days, the number of kilometers Monocarp walks repeats, and process days in \"triples\".During every three days, Monocarp walks exactly (a+b+c) kilometers, so we can do the following: while n≥a+b+c, subtract (a+b+c) from n and increase the answer by 3; and finally, process the remaining days, since there will be at most 3 of them.However, this works in O(n) per test case, so it is still too slow. We need to improve the part when we subtract a+b+c from n until n becomes less than this sum. Does this sound familiar?The number of times we need to subtract (a+b+c) from n is exactly ⌊na+b+c⌋, and the number we get after that is nmod(a+b+c) by definition of integer division and remainder. This allows us to process all \"triples\" in O(1), instead of running a loop in O(n).The solution we get works in O(1) per test case.",
        "code": "t = int(input())\nfor i in range(t):\n    n, a, b, c = map(int, input().split())\n    sum = a + b + c\n    d = n // sum * 3\n    if n % sum == 0:\n        print(d)\n    elif n % sum <= a:\n        print(d + 1)\n    elif n % sum <= a + b:\n        print(d + 2)\n    else:\n        print(d + 3)\n"
    }
}