{
    "problem": {
        "title": "Kachina's Favorite Binary String",
        "description": "This is an interactive problem. Kachina challenges you to guess her favorite binary string ∗ s of length n . She defines f ( l , r ) as the number of subsequences † of 01 in s l s l + 1 … s r . Two subsequences are considered different if they are formed by deleting characters from different positions in the original string, even if the resulting subsequences consist of the same characters. To determine s , you can ask her some questions. In each question, you can choose two indices l and r ( 1 ≤ l < r ≤ n ) and ask her for the value of f ( l , r ) . Determine and output s after asking Kachina no more than n questions. However, it may be the case that s is impossible to be determined . In this case, you would need to report IMPOSSIBLE instead. Formally, s is impossible to be determined if after asking n questions, there are always multiple possible strings for s , regardless of what questions are asked. Note that if you report IMPOSSIBLE when there exists a sequence of at most n queries that will uniquely determine the binary string, you will get the Wrong Answer verdict. ∗ A binary string only contains characters 0 and 1 . † A sequence a is a subsequence of a sequence b if a can be obtained from b by the deletion of several (possibly, zero or all) elements. For example, subsequences of 1011101 are 0 , 1 , 11111 , 0111 , but not 000 nor 11100 .",
        "input_specification": "The first line of input contains a single integer tt (1≤t≤1031≤t≤103) — the number of test cases.The first line of each test case contains a single integer nn (2≤n≤1042≤n≤104) — the length of ss. It is guaranteed that the sum of nn over all test cases does not exceed 104104.",
        "output_specification": "",
        "time_limit": "2 seconds",
        "memory_limit": "256 megabytes",
        "tags": [
            "dp",
            "greedy",
            "interactive",
            "two pointers"
        ],
        "examples": [
            {
                "input": "2\n5\n\n4\n\n0\n\n1\n\n2\n\n2\n\n0",
                "output": "? 1 5\n\n? 2 4\n\n? 4 5\n\n? 3 5\n\n! 01001\n\n? 1 2\n\n! IMPOSSIBLE"
            }
        ],
        "difficulty": "medium"
    },
    "solution": {
        "description": "Notice that for if for some rr we have f(1,r)<f(1,r+1)f(1,r)<f(1,r+1) then we can conclude that sr+1=1sr+1=1 (if it is 00 then f(1,r)=f(1,r+1)f(1,r)=f(1,r+1) will be true) and if f(1,r)f(1,r) is non-zero and f(1,r)=f(1,r+1)f(1,r)=f(1,r+1) then sr+1sr+1 is 00.Unfortunately this is only useful if there is a 00 in s1,s2,...,srs1,s2,...,sr, so the next thing can try is to find is the value of the longest prefix such that f(1,r)f(1,r) is 00 (after this point there will be a zero in all prefixes). See that if f(1,r)=0f(1,r)=0 and f(1,r+1)=kf(1,r+1)=k then sr+1=1sr+1=1, the last kk characters of s1,s2,...,srs1,s2,...,sr must be 00 and the first r−kr−k characters must be 11. To prove this we can argue by contradiction, suppose it is not true and then it will become apparent that some shorter prefix will be non-zero when we query it.The one case that this does not cover is when all prefixes are zero, from similar contradiction argument as above we can see that the string must look like 111...1100....000111...1100....000 in this case, in this case it is not hard to see that all queries will give a value of zero, and thus we can report that it is impossible.So we should query all prefixes, the first one which is non-zero (if this does not exist we can report impossible) we can deduce its value as discussed above, then there will be a 00 in the prefix so we can deduce all subsequent characters as discussed at the start.",
        "code": "def qu(a,b):\n    if (a,b) not in d:\n        print(\"?\", a+1,b+1)\n        d[(a,b)] = int(input())\n    return d[(a,b)]\nfor _ in range(int(input())):\n    d = dict()\n    n = int(input())\n    SOL = [\"0\"] * n\n    last = qu(0,n-1)\n    if last:\n        z = 1\n        for i in range(n-2,0,-1):\n            nw= qu(0,i)\n            if nw != last:\n                SOL[i+1] = \"1\"\n            last = nw\n            if last == 0:\n                z = i+1;break\n        if last:\n            SOL[1] = \"1\"\n            SOL[0] = \"0\"\n        else:\n            last = 1\n            for j in range(z-2,-1,-1):\n                nw = qu(j,z)\n                if nw == last:\n                    SOL[j] = \"1\"\n                last = nw\n        print(\"!\",\"\".join(SOL))\n    else:\n        print(\"! IMPOSSIBLE\")"
    }
}