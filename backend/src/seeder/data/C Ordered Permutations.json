{
    "problem": {
        "title": "Ordered Permutations",
        "description": "Consider a permutation ∗ p 1 , p 2 , … , p n of integers from 1 to n . We can introduce the following sum for it † : S ( p ) = ∑ 1 ≤ l ≤ r ≤ n min ( p l , p l + 1 , … , p r ) Let us consider all permutations of length n with the maximum possible value of S ( p ) . Output the k -th of them in lexicographical ‡ order, or report that there are less than k of them. ∗ A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2 , 3 , 1 , 5 , 4 ] is a permutation, but [ 1 , 2 , 2 ] is not a permutation ( 2 appears twice in the array), and [ 1 , 3 , 4 ] is also not a permutation ( n = 3 but there is 4 in the array). † For example: For the permutation [ 1 , 2 , 3 ] the value of S ( p ) is equal to min ( 1 ) + min ( 1 , 2 ) + min ( 1 , 2 , 3 ) + min ( 2 ) + min ( 2 , 3 ) + min ( 3 ) = 1 + 1 + 1 + 2 + 2 + 3 = 10 For the permutation [ 2 , 4 , 1 , 3 ] the value of S ( p ) is equal to min ( 2 ) + min ( 2 , 4 ) + min ( 2 , 4 , 1 ) + min ( 2 , 4 , 1 , 3 ) + min ( 4 ) + min ( 4 , 1 ) + min ( 4 , 1 , 3 ) + min ( 1 ) + min ( 1 , 3 ) + min ( 3 ) = 2 + 2 + 1 + 1 + 4 + 1 + 1 + 1 + 1 + 3 = 17 . ‡ An array a is lexicographically smaller than an array b if and only if one of the following holds: a is a prefix of b , but a ≠ b ; or in the first position where a and b differ, the array a has a smaller element than the corresponding element in b .",
        "input_specification": "Each test contains multiple test cases. The first line contains the number of test cases tt (1≤t≤1041≤t≤104). The description of the test cases follows.The only line of each test case contains two integers nn and kk (1≤n≤2⋅1051≤n≤2⋅105; 1≤k≤10121≤k≤1012) — the length of the permutation and the index number of the desired permutation.It is guaranteed that the sum of nn over all test cases does not exceed 2⋅1052⋅105.",
        "output_specification": "For each test case, if there are less than kk suitable permutations, print −1−1.Otherwise, print the kk-th suitable permutation.",
        "time_limit": "2 seconds",
        "memory_limit": "256 megabytes",
        "tags": [
            "bitmasks",
            "combinatorics",
            "constructive algorithms",
            "greedy",
            "math",
            "two pointers"
        ],
        "examples": [
            {
                "input": "6\n3 2\n3 3\n4 11\n4 6\n6 39\n7 34",
                "output": "1 3 2 \n2 3 1 \n-1\n2 4 3 1 \n-1\n2 3 4 5 7 6 1 \n"
            }
        ],
        "difficulty": "medium"
    },
    "solution": {
        "description": "2040C - Ordered PermutationsThese permutations are generated as follows. We will greedily go through the numbers in order from 1 to n, and we will put each one either in the first free cell or in the last one. For example, if we want to put 4 in the permutation 1, 3, \\circ, \\circ, \\dots, \\circ, 2, we can put it either in the third cell or in the second from the end. That is, the permutation first increases and then decreases.We can prove that the greedy algorithm works like this. Let us now want to put the number i. When we put this number, we can immediately say that the minimum on the segments, one of the ends of which is the chosen position, is equal to i (we do not take into account already placed numbers smaller than i). The number of these segments is equal to n - i + 1. The answer we get is equal to the sum of this fixed number and what we get in the future. Assume we put the number i not at the end of the array. Let's consider the optimal further answer: [\\dots, x_j, \\dots] i [\\dots, x_j, \\dots]. Now let's put i at the end of the array and leave the order of the following elements unchanged. All segments whose ends lie on elements that are larger than i may no longer cover the number i, but the sets of numbers larger than i that they cover have not changed. So the answer got better.Since we choose one of the ends independently, there are 2^{n - 1} of such permutations, and we can find the k-th one using a simple loop, similar to converting a number into binary notation.",
        "code": "tt = int(input())\nfor _ in range(tt):\n    n, k = map(int, input().split())\n    a, b = [], []\n \n    if n <= 60 and (1 << (n - 1)) < k:\n        print(-1)\n        continue\n    k -= 1\n    d = []\n    while k:\n        d.append(k % 2)\n        k //= 2\n    while len(d) < n - 1:\n        d.append(0)\n \n    a, b = [], []\n    j = 1\n    for i in range(n - 2, -1, -1):\n        if d[i] == 0:\n            a.append(j)\n        else:\n            b.append(j)\n        j += 1\n \n    b.reverse()\n    print(*a, n, *b)"
    }
}