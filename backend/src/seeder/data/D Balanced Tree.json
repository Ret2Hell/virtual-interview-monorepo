{
    "problem": {
        "title": "Balanced Tree",
        "description": "You are given a tree ∗ with n nodes and values l i , r i for each node. You can choose an initial value a i satisfying l i ≤ a i ≤ r i for the i -th node. A tree is balanced if all node values are equal, and the value of a balanced tree is defined as the value of any node. In one operation, you can choose two nodes u and v , and increase the values of all nodes in the subtree † of node v by 1 while considering u as the root of the entire tree. Note that u may be equal to v . Your goal is to perform a series of operations so that the tree becomes balanced . Find the minimum possible value of the tree after performing these operations. Note that you don't need to minimize the number of operations. ∗ A tree is a connected graph without cycles. † Node w is considered in the subtree of node v if any path from root u to w must go through v .",
        "input_specification": "The first line of input contains a single integer tt (1≤t≤1051≤t≤105) — the number of input test cases.The first line of each test case contains one integer nn (1≤n≤2⋅1051≤n≤2⋅105) — the number of nodes in the tree.Then nn lines follow. The ii-th line contains two integers li,rili,ri (0≤li≤ri≤1090≤li≤ri≤109) — the constraint of the value of the ii-th node.The next n−1n−1 lines contain the edges of the tree. The ii-th line contains two integers ui,viui,vi (1≤ui,vi≤n1≤ui,vi≤n, ui≠viui≠vi) — an edge connecting uiui and vivi. It is guaranteed that the given edges form a tree.It is guaranteed that the sum of nn over all test cases does not exceed 2⋅1052⋅105.",
        "output_specification": "For each test case, output a single integer — the minimum possible value that all aiai can be made equal to after performing the operations. It can be shown that the answer always exists.",
        "time_limit": "3 seconds",
        "memory_limit": "512 megabytes",
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "greedy",
            "trees"
        ],
        "examples": [
            {
                "input": "6\n4\n0 11\n6 6\n0 0\n5 5\n2 1\n3 1\n4 3\n7\n1 1\n0 5\n0 5\n2 2\n2 2\n2 2\n2 2\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4\n1 1\n1 1\n1 1\n0 0\n1 4\n2 4\n3 4\n7\n0 20\n0 20\n0 20\n0 20\n3 3\n4 4\n5 5\n1 2\n1 3\n1 4\n2 5\n3 6\n4 7\n5\n1000000000 1000000000\n0 0\n1000000000 1000000000\n0 0\n1000000000 1000000000\n3 2\n2 1\n1 4\n4 5\n6\n21 88\n57 81\n98 99\n61 76\n15 50\n23 67\n2 1\n3 2\n4 3\n5 3\n6 4",
                "output": "11\n3\n3\n5\n3000000000\n98\n"
            }
        ],
        "difficulty": "hard"
    },
    "solution": {
        "description": "2062D - Balanced TreeFirst, assume that the values of aiai have already been determined and 11 is the root of the tree. For any edge connecting xx and fa(x)fa(x), to make ax=afa(x)ax=afa(x), the only useful operation is to set u=x,v=fa(x)u=x,v=fa(x) or v=x,u=fa(x)v=x,u=fa(x). After the operation, ax−afa(x)ax−afa(x) changes by 11, so you will always perform exactly |ax−afa(x)||ax−afa(x)| operations to make ax=afa(x)ax=afa(x). You will perform the above operation for each edge to make all nodes' values equal. Among those operations, the connected component containing 11 will increase by ∑max(au−afa(u),0)∑max(au−afa(u),0) times. Thus, the final answer is a1+∑max(au−afa(u),0)a1+∑max(au−afa(u),0).Now, consider how to choose the values of aa. If ru=+∞ru=+∞, then auau should always be no less than the maximum value of its child nodes avav (why? Because decreasing auau by 11 can only reduce au−afa(u)au−afa(u) by at most 11, but it will increase av−auav−au by at least 11). So au=min(ru,max(lu,maxfa(v)=uav))au=min(ru,max(lu,maxfa(v)=uav)).",
        "code": "for _ in range(int(input())):\n\tn = int(input())\n\tl,r=[],[]\n\tfor i in range(n):\n\t\tL,R=map(int,input().split())\n\t\tl.append(L)\n\t\tr.append(R)\n\te=[[] for i in range(n)]\n\tfor i in range(n-1):\n\t\tu,v=map(int,input().split())\n\t\te[u-1].append(v-1)\n\t\te[v-1].append(u-1)\n\tstk=[0]\n\tf=[-1]*n\n\tnfd=[]\n\twhile stk:\n\t\tu=stk.pop()\n\t\tnfd.append(u)\n\t\tfor v in e[u]:\n\t\t\tif v!=f[u]:\n\t\t\t\tf[v]=u\n\t\t\t\tstk.append(v)\n\tnfd.reverse()\n\tans=0\n\tfor u in nfd:\n\t\tfor v in e[u]:\n\t\t\tif f[v]==u:\n\t\t\t\tl[u]=max(l[u],l[v])\n\t\tl[u]=min(l[u],r[u])\n\t\tfor v in e[u]:\n\t\t\tif f[v]==u:\n\t\t\t\tans+=max(0,l[v]-l[u])\n\tprint(ans+l[0])"
    }
}