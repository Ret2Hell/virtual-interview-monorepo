{
    "problem": {
        "title": "Traveling Salescat",
        "description": "You are a cat selling fun algorithm problems. Today, you want to recommend your fun algorithm problems to k cities. There are a total of n cities, each with two parameters a i and b i . Between any two cities i , j ( i ≠ j ), there is a bidirectional road with a length of max ( a i + b j , b i + a j ) . The cost of a path is defined as the total length of roads between every two adjacent cities along the path. For k=2,3,...,n , find the minimum cost among all simple paths containing exactly k distinct cities.",
        "input_specification": "The first line of input contains a single integer t (1 <=q t <=q 1500) — the number of test cases.For each test case, the first line contains a single integer n (2 <=q n <=q 3* 10^3) — the number of cities.Then n lines follow, the i-th line contains two integers a_i,b_i (0 <=q a_i,b_i <=q 10^9) — the parameters of city i.It is guaranteed that the sum of n^2 over all test cases does not exceed 9* 10^6.",
        "output_specification": "For each test case, print n-1 integers in one line. The i-th integer represents the minimum cost when k=i+1.",
        "time_limit": "2 seconds",
        "memory_limit": "512 megabytes",
        "tags": [
            "constructive algorithms",
            "dp",
            "geometry",
            "graphs",
            "greedy",
            "math",
            "sortings"
        ],
        "examples": [
            {
                "input": "3\n3\n0 2\n2 1\n3 3\n5\n2 7\n7 5\n6 3\n1 8\n7 5\n8\n899167687 609615846\n851467150 45726720\n931502759 23784096\n918190644 196992738\n142090421 475722765\n409556751 726971942\n513558832 998277529\n294328304 434714258",
                "output": "4 9 \n10 22 34 46 \n770051069 1655330585 2931719265 3918741472 5033924854 6425541981 7934325514 \n"
            }
        ],
        "difficulty": "hard"
    },
    "solution": {
        "description": "2062F - Traveling SalescatLet xi=ai+bi2, yi=ai−bi2. Then max(ai+bj,bi+aj)=max(xi+yi+xj−yj,xi−yi+xj+yj)=xi+xj+max(yi−yj,yj−yi)=xi+xj+|yi−yj|.Consider a road that passes through k different cities, and consider the contribution as two parts, x and y. For the contribution of x, the first and last cities will only contribute to the answer once. And all other cities on the path will contribute twice.For the contribution of y, after determining the cities that need to be passed through and the two cities as starting or ending cities (referred to as endpoint cities), you can start from the endpoint city with smaller y, move to the city with the smallest y among the cities to be passed through, then move to the city with the largest y among the cities to be passed through, and finally move to the endpoint city with larger y. This way, the minimum contribution of y can be obtained while passing through all the cities that need to be passed through.You can sort the cities by y and perform a dp to find the minimum answer among the first i cities where j cities have been selected, including 0 or 1 or 2 endpoint cities. The total time complexity is O(n2).",
        "code": "class Q:\n\tdef __init__(this,x,y):\n\t\tthis.x,this.y=x+y,x-y\n\tdef __lt__(this,rhs):\n\t\treturn this.y<rhs.y\nfor _ in range(int(input())):\n\tn=int(input())\n\ta=[0]*n\n\tfor i in range(n):\n\t\tx,y=map(int,input().split())\n\t\ta[i]=Q(x,y)\n\ta.sort()\n\tl=[10**18]*(n+1)\n\tsl=l.copy();slt=l.copy();slrt=l.copy()\n\ts=10**18\n\tfor m,t in enumerate(a):\n\t\tx,y=t.x,t.y\n\t\tfor i in range(m,0,-1):\n\t\t\tslrt[i+1]=min(slrt[i+1],sl[i]+x+y,slt[i]+x*2+y*2)\n\t\t\tslt[i+1]=min(slt[i+1],slt[i]+x*2,sl[i]+x-y)\n\t\t\tsl[i+1]=min(sl[i+1],sl[i]+x*2,l[i]+x+y)\n\t\t\tl[i+1]=min(l[i+1],l[i]+x*2)\n\t\tsl[1]=min(sl[1],x-y)\n\t\tl[1]=min(l[1],x*2-y*2)\n\tprint(*[x//2 for x in slrt[2:]])"
    }
}