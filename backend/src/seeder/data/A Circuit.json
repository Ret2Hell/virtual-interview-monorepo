{
    "problem": {
        "title": "Circuit",
        "description": "Alice has just crafted a circuit with n lights and 2 n switches. Each component (a light or a switch) has two states: on or off. The lights and switches are arranged in a way that: Each light is connected to exactly two switches. Each switch is connected to exactly one light. It's unknown which light each switch is connected to. When all switches are off, all lights are also off. If a switch is toggled (from on to off, or vice versa), the state of the light connected to it will also toggle. Alice brings the circuit, which shows only the states of the 2 n switches, to her sister Iris and gives her a riddle: what is the minimum and maximum number of lights that can be turned on? Knowing her little sister's antics too well, Iris takes no more than a second to give Alice a correct answer. Can you do the same?",
        "input_specification": "Each test consists of multiple test cases. The first line contains a single integer tt (1≤t≤5001≤t≤500) — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer nn (1≤n≤501≤n≤50) — the number of lights in the circuit.The second line of each test case contains 2n2n integers a1,a2,…,a2na1,a2,…,a2n (0≤ai≤10≤ai≤1) — the states of the switches in the circuit. ai=0ai=0 means the ii-th switch is off, and ai=1ai=1 means the ii-th switch is on.",
        "output_specification": "For each test case, output two integers — the minimum and maximum number of lights, respectively, that can be turned on.",
        "time_limit": "1 second",
        "memory_limit": "256 megabytes",
        "tags": [
            "greedy",
            "implementation",
            "math",
            "number theory"
        ],
        "examples": [
            {
                "input": "5\n1\n0 0\n1\n0 1\n1\n1 1\n3\n0 0 1 0 1 0\n3\n0 1 1 1 0 0",
                "output": "0 0\n1 1\n0 0\n0 2\n1 3\n"
            }
        ],
        "difficulty": "easy"
    },
    "solution": {
        "description": "2032A - CircuitObserve that an even number of switch toggles on the same light will not change that light's status. In other words, a light is on if and only if exactly one of the two switches connecting to it is on.Let's denote cnt0cnt0 and cnt1cnt1 as the number of off switches and on switches in the circuit. We see that The maximum number of on lights is min(cnt0,cnt1)min(cnt0,cnt1): we can't achieve more than this amount since any on light decreases both cnt0cnt0 and cnt1cnt1 by 11, and we can achieve this amount by matching min(cnt0,cnt1)min(cnt0,cnt1) pairs of one off switch and one on switch, and the rest can be matched arbitrarily. The minimum number of on lights is cnt0mod2cnt0mod2. Since cnt0+cnt1=2ncnt0+cnt1=2n, they have the same parity. Then, we can easily see that when both cnt0cnt0 and cnt1cnt1 are even, we can match nn pairs of the same type of switches, so there are no on lights in this case. When both cnt0cnt0 and cnt1cnt1 are odd, we must match one on switch with one off switch to make cnt0cnt0 and cnt1cnt1 even, so there is one on light in this case. The calculation of cnt0cnt0 and cnt1cnt1 can be easily done by a simple iteration over the switches.Time complexity: O(n)O(n).",
        "code": "class Solution:\n    hasMultipleTests = True\n\n    n: int = None\n    a: list = None\n\n    @classmethod\n    def preprocess(cls):\n        pass\n\n    @classmethod\n    def input(cls, testcase):\n        cls.n = int(input())\n        cls.a = list(map(int, input().split()))\n\n    @classmethod\n    def solve(cls, testcase):\n        cnt0 = sum(cls.a)\n        \n        print(cnt0 & 1, min(cnt0, cls.n*2 - cnt0))\n\n# end Solution"
    }
}