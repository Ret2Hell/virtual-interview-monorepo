{
    "problem": {
        "title": "The Third Side",
        "description": "The pink soldiers have given you a sequence a consisting of n positive integers. You must repeatedly perform the following operation until there is only 1 element left . Choose two distinct indices i and j . Then, choose a positive integer value x such that there exists a non-degenerate triangle ∗ with side lengths a i , a j , and x . Finally, remove two elements a i and a j , and append x to the end of a . Please find the maximum possible value of the only last element in the sequence a . ∗ A triangle with side lengths a , b , c is non-degenerate when a + b > c , a + c > b , b + c > a .",
        "input_specification": "Each test contains multiple test cases. The first line contains the number of test cases t (1≤t≤104). The description of the test cases follows. The first line of each test case contains a single integer n (1≤n≤2⋅105).The second line of each test case contains n integers a1,a2,…,an (1≤ai≤1000) — the elements of the sequence a.It is guaranteed that the sum of n over all test cases does not exceed 2⋅105.",
        "output_specification": "For each test case, output the maximum possible value of the only last element on a separate line.",
        "time_limit": "2 seconds",
        "memory_limit": "256 megabytes",
        "tags": [
            "geometry",
            "greedy",
            "math"
        ],
        "examples": [
            {
                "input": "4\n1\n10\n3\n998 244 353\n5\n1 2 3 4 5\n9\n9 9 8 2 4 4 3 5 3",
                "output": "10\n1593\n11\n39\n"
            }
        ],
        "difficulty": "easy"
    },
    "solution": {
        "description": "2074B - The Third SideWe can solve this problem by observing a property on the sum of elements.After each operation, it must hold that ai+aj>x, and the new element is at most ai+aj−1. Therefore, the sum decreases by at least 1.However, we notice that a triangle of side lengths p, q, p+q−1 is always non-degenerate due to the following: p+q>p+q−1; p+(p+q−1)>q due to 2p−1>0; q+(p+q−1)>p due to 2q−1>0. Therefore, you can decrease the sum by exactly 1 on each operation. The maximum final sum (which is the last element) is thus sum−n+1.",
        "code": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    sm = sum(map(int, input().split()))\n    print(sm - n + 1)"
    }
}